import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns

# 1) Bar graph data
configs = [
    "Real Only",
    "Config 1\n(All Compounds)",
    "Config 2\n(Mono, Tri, Esterified, Pseudo)",
    "Config 3\n(Esterified, Tri, Pseudo)",
    "Config 4\n(Esterified, Tri)",
    "Config 5\n(Tri Only)"
]

smape  = [61.88, 73.07, 72.02, 68.93, 66.13, 72.02]
nrmse  = [0.495, 0.327, 0.509, 0.425, 0.299, 0.509]
r2     = [-0.788, -0.747, -0.539, -0.505, -0.786, -0.539]

x = np.arange(len(configs))
width = 0.25

# --- Bar graph with broken y-axis ---
fig, (ax1, ax2) = plt.subplots(
    2, 1, sharex=True, figsize=(12, 8),
    gridspec_kw={'height_ratios': [1, 3], 'hspace': 0.05}
)

# Top plot: SMAPE only
ax1.bar(x - width, smape, width, color='skyblue', label='SMAPE (%)')
ax1.set_ylim(55, 80)
ax1.spines['bottom'].set_visible(False)
ax1.tick_params(labelbottom=False)
ax1.legend(loc='upper right')

# Bottom plot: SMAPE + NRMSE + R²
ax2.bar(x - width, smape, width, color='skyblue', label='SMAPE (%)')
ax2.bar(x,       nrmse, width, color='orange',  label='NRMSE')
ax2.bar(x + width, r2,    width, color='green',   label='R²')
ax2.set_ylim(-1.1, 1.1)
ax2.spines['top'].set_visible(False)
ax2.legend(loc='upper right')

# Diagonal break marks
d = .015
for ax in (ax1, ax2):
    kwargs = dict(transform=ax.transAxes, color='k', clip_on=False)
    if ax is ax1:
        ax.plot((-d, +d), (-d, +d), **kwargs)
        ax.plot((1 - d, 1 + d), (-d, +d), **kwargs)
    else:
        ax.plot((-d, +d), (1 - d, 1 + d), **kwargs)
        ax.plot((1 - d, 1 + d), (1 - d, 1 + d), **kwargs)

# Final touches
ax2.set_xticks(x)
ax2.set_xticklabels(configs, rotation=30, ha='right')
ax2.set_ylabel('Metric Value')
fig.suptitle('Comparison of SMAPE, NRMSE, and R² Across GAN Configurations (RF Model)')
# enable horizontal grid lines on both panels
ax1.grid(axis='y', linestyle='--', linewidth=0.5, alpha=0.7)
ax2.grid(axis='y', linestyle='--', linewidth=0.5, alpha=0.7)

plt.tight_layout(rect=[0, 0, 1, 0.95])
plt.show()


# 2) Heatmap: per-compound SMAPE
compound_smape = {
    'Compound': ["DIPBA","4-HBA","Sulfonate","Mono","Esterified","Tri","Pseudo"],
    'Real Only': [26.447, 3.528, 28.860, 59.075, 55.950, 33.071, 69.975],
    'Config 1\n(All Compounds)': [15.961, 12.167, 24.568, 55.386, 49.098, 39.502, 61.308],
    'Config 2\n(Mono, Tri, Esterified, Pseudo)': [26.295, 13.898, 25.703, 54.787, 66.898, 30.133, 70.377],
    'Config 3\n(Esterified, Tri, Pseudo)': [18.049, 6.610, 21.022, 59.575, 57.130, 37.980, 59.440],
    'Config 4\n(Esterified, Tri)': [11.628, 7.165, 24.898, 53.574, 55.662, 38.646, 42.335],
    'Config 5\n(Tri Only)': [18.354, 6.980, 21.295, 59.455, 56.512, 35.959, 74.758],
}
df_smape = pd.DataFrame(compound_smape).set_index('Compound')

plt.figure(figsize=(12, 6))
sns.heatmap(
    df_smape, annot=True, fmt=".1f", cmap="Blues",
    cbar_kws={'label': 'SMAPE (%)'}
)
plt.title("Per-Compound SMAPE Across GAN Configurations")
plt.xlabel("Configuration")
plt.ylabel("Compound")
plt.xticks(rotation=30, ha='right')
plt.tight_layout()
plt.show()


# 3) Heatmaps: NRMSE & R² (excluding low-level impurities)
nrmse_data = {
    'Compound': ["DIPBA","4-HBA","Sulfonate","Mono","Esterified","Tri","Pseudo"],
    'Real Only': [0.199, 0.025, 0.263, 0.921, 0.669, 0.234, 0.291],
    'Config 1\n(All Compounds)': [0.129, 0.094, 0.254, 0.952, 0.608, 0.290, 0.267],
    'Config 2\n(Mono, Tri, Esterified, Pseudo)': [0.204, 0.132, 0.239, 0.714, 0.761, 0.209, 0.302],
    'Config 3\n(Esterified, Tri, Pseudo)': [0.169, 0.122, 0.234, 0.755, 0.680, 0.254, 0.302],
    'Config 4\n(Esterified, Tri)': [0.111, 0.072, 0.273, 0.931, 0.666, 0.273, 0.239],
    'Config 5\n(Tri Only)': [0.149, 0.083, 0.231, 0.947, 0.677, 0.234, 0.338],
}
r2_data = {
    'Compound': ["DIPBA","4-HBA","Sulfonate","Mono","Esterified","Tri","Pseudo"],
    'Real Only': [0.753, 0.995, 0.601, -7.215, -3.055, 0.484, 0.511],
    'Config 1\n(All Compounds)': [0.896, 0.936, 0.628, -7.769, -2.347, 0.212, 0.586],
    'Config 2\n(Mono, Tri, Esterified, Pseudo)': [0.739, 0.873, 0.672, -3.941, -4.251, 0.589, 0.471],
    'Config 3\n(Esterified, Tri, Pseudo)': [0.822, 0.892, 0.684, -4.513, -3.197, 0.395, 0.471],
    'Config 4\n(Esterified, Tri)': [0.922, 0.963, 0.572, -7.390, -3.017, 0.300, 0.668],
    'Config 5\n(Tri Only)': [0.860, 0.950, 0.692, -7.689, -3.159, 0.488, 0.339],
}
df_nrmse = pd.DataFrame(nrmse_data).set_index('Compound')
df_r2   = pd.DataFrame(r2_data).set_index('Compound')

fig, axes = plt.subplots(1, 2, figsize=(16, 6))
sns.heatmap(
    df_nrmse, annot=True, fmt=".3f", cmap="YlOrBr",
    cbar_kws={'label': 'NRMSE'}, ax=axes[0]
)
axes[0].set_title("Per-Compound NRMSE")

sns.heatmap(
    df_r2, annot=True, fmt=".3f", cmap="Greens",
    cbar_kws={'label': 'R²'}, ax=axes[1]
)
axes[1].set_title("Per-Compound R²")

for ax in axes:
    ax.tick_params(axis='x', rotation=30)

plt.tight_layout()
plt.show()

# Transpose so rows = configurations, columns = compounds
df_nrmse_flip = df_nrmse
df_r2_flip    = df_r2

fig, axes = plt.subplots(1, 2, figsize=(16, 6))


# 1) Define the lists
configs = [
    "Real Only",
    "Config 1\n(All Compounds)",
    "Config 2\n(Mono, Tri, Esterified, Pseudo)",
    "Config 3\n(Esterified, Tri, Pseudo)",
    "Config 4\n(Esterified, Tri)",
    "Config 5\n(Tri Only)"
]

compounds = ["DIPBA","HBA","Sulfonate","Mono","Esterified","Tri","Pseudo"]

# 2) Put your values into a nested list: each sub‑list corresponds to one config
nrmse_vals = [
    [0.199, 0.025, 0.263, 0.921, 0.669, 0.234, 0.291],  # Real Only
    [0.129, 0.094, 0.254, 0.952, 0.608, 0.290, 0.267],  # All Compounds
    [0.204, 0.132, 0.239, 0.714, 0.761, 0.209, 0.302],  # Mono,Tri,Esterified,Pseudo
    [0.169, 0.122, 0.234, 0.755, 0.680, 0.254, 0.302],  # Esterified,Tri,Pseudo
    [0.111, 0.072, 0.273, 0.931, 0.666, 0.273, 0.239],  # Esterified,Tri
    [0.149, 0.083, 0.231, 0.947, 0.677, 0.234, 0.338],  # Tri Only
]

r2_vals = [
    [0.753, 0.995, 0.601, -7.215, -3.055, 0.484, 0.511],
    [0.896, 0.936, 0.628, -7.769, -2.347, 0.212, 0.586],
    [0.739, 0.873, 0.672, -3.941, -4.251, 0.589, 0.471],
    [0.822, 0.892, 0.684, -4.513, -3.197, 0.395, 0.471],
    [0.922, 0.963, 0.572, -7.390, -3.017, 0.300, 0.668],
    [0.860, 0.950, 0.692, -7.689, -3.159, 0.488, 0.339],
]

# 3) Build DataFrames with configs as index and compounds as columns
df_nrmse = pd.DataFrame(nrmse_vals, index=configs, columns=compounds)
df_r2    = pd.DataFrame(r2_vals,   index=configs, columns=compounds)

# 4) Plot side-by-side heatmaps
fig, axes = plt.subplots(1, 2, figsize=(16, 6))

sns.heatmap(
    df_nrmse,
    annot=True, fmt=".3f",
    cmap="YlOrBr",
    cbar_kws={'label': 'NRMSE'},
    ax=axes[0]
)
axes[0].set_title("Per-Configuration NRMSE")
axes[0].set_ylabel("GAN Configuration")
axes[0].set_xlabel("Compound")
axes[0].tick_params(axis='x', rotation=45)

sns.heatmap(
    df_r2,
    annot=True, fmt=".3f",
    cmap="Greens",
    cbar_kws={'label': 'R²'},
    ax=axes[1]
)
axes[1].set_title("Per-Configuration R²")
axes[1].set_ylabel("GAN Configuration")
axes[1].set_xlabel("Compound")
axes[1].tick_params(axis='x', rotation=45)

plt.tight_layout()
plt.show()
